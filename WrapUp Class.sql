--CRUD
DROP TABLE IF EXISTS E_CUSTOMERS
CREATE TABLE E_CUSTOMERS
(CUSTOMER_ID INT NOT NULL,
FIRST_NAME VARCHAR(50) NOT NULL,
LAST_NAME VARCHAR(50) NOT NULL,
AGE INT NOT NULL,
COUNTRY VARCHAR(50) NOT NULL
)

INSERT INTO E_CUSTOMERS
VALUES 
(1,'JOHN','DOE',31,'USA'),
(2,'CASSY','LUNA',24,'UK'),
(3,'ROBERT','ROBINSON',28,'UAE'),
(4,'DAVID','BOB',22,'USA'),
(5,'BETTY','MARWEIH',47,'USA')

DROP TABLE IF EXISTS E_PRODUCTS
CREATE TABLE E_PRODUCTS
(ORDER_ID INT NOT NULL,
AMOUNT MONEY NOT NULL,
CUSTOMER INT NOT NULL)

INSERT INTO E_PRODUCTS
VALUES
(1,200,10),
(2,500,3),
(3,300,6),
(4,800,5),
(5,150,8)

SELECT * FROM E_CUSTOMERS
SELECT * FROM E_PRODUCTS

--JOIN BOTH TABLES TO SHOW COMMON VALUE
SELECT *
FROM E_CUSTOMERS A
JOIN E_PRODUCTS B ON A.CUSTOMER_ID=B.ORDER_ID

SELECT *
FROM E_CUSTOMERS A, E_PRODUCTS B
WHERE A.CUSTOMER_ID=B.ORDER_ID

--UPDATE AMOUNT FROM 200 TO 2000 FOR JOHN
Update E_PRODUCTS
Set AMOUNT=2000
where ORDER_ID=1

--REMOVE THE HIGHEST AMOUNT IN THE TABLE
DELETE E_PRODUCTS
WHERE AMOUNT = 
(SELECT MAX(AMOUNT)
FROM E_PRODUCTS)

--SHOW RECORD WITH MIN AMOUNT
SELECT * 
FROM E_PRODUCTS
WHERE AMOUNT = (
SELECT
MIN(AMOUNT)
FROM E_PRODUCTS )

--CUSTOMERS HAVING 0-3 RECORDS SHOULD BE CATEGORIZED AS POOR, 6 AND BELOW AS GOOD,  BELOW 10 THEN BETTER, ELSE BEST
SELECT *,
CASE 
WHEN CUSTOMER<=3 THEN 'POOR'
WHEN CUSTOMER BETWEEN 3 AND 6 THEN 'GOOD'
WHEN CUSTOMER BETWEEN 7 AND 10 THEN 'BETTER'
ELSE 'BEST'
END CATEGORY
FROM E_PRODUCTS

--SHOW DUP RECORDS
SELECT CUSTOMER_ID,FIRST_NAME,LAST_NAME,AGE,COUNTRY,
COUNT(*) AS COUNT
FROM E_CUSTOMERS
GROUP BY CUSTOMER_ID,FIRST_NAME,LAST_NAME,AGE,COUNTRY
HAVING COUNT(*) > 4

--
SELECT CUSTOMER_ID,FIRST_NAME,LAST_NAME,AGE,COUNTRY,
MAX(COUNT) MAX
FROM (
SELECT CUSTOMER_ID,FIRST_NAME,LAST_NAME,AGE,COUNTRY,
COUNT(*) AS COUNT
FROM E_CUSTOMERS
GROUP BY CUSTOMER_ID,FIRST_NAME,LAST_NAME,AGE,COUNTRY
) X
GROUP BY CUSTOMER_ID,FIRST_NAME,LAST_NAME,AGE,COUNTRY

SELECT *
FROM (
SELECT CUSTOMER_ID,FIRST_NAME,LAST_NAME,AGE,COUNTRY,
COUNT(*) AS DUPLICATE
FROM E_CUSTOMERS
GROUP BY CUSTOMER_ID,FIRST_NAME,LAST_NAME,AGE,COUNTRY
) X
HAVING DUPLICATE = (SELECT MAX(DUPLICATE) FROM E_CUSTOMERS)
--GROUP BY CUSTOMER_ID,FIRST_NAME,LAST_NAME,AGE,COUNTRY

WITH DUP AS 
 (
SELECT CUSTOMER_ID,FIRST_NAME,LAST_NAME,AGE,COUNTRY,
COUNT(*) AS DUPLICATE
FROM E_CUSTOMERS
GROUP BY CUSTOMER_ID,FIRST_NAME,LAST_NAME,AGE,COUNTRY
) 
SELECT CUSTOMER_ID,FIRST_NAME,LAST_NAME,AGE,COUNTRY,DUPLICATE
FROM DUP
WHERE DUPLICATE = ( SELECT MAX(DUPLICATE) MAX_DUPLICATES FROM DUP)
GROUP BY CUSTOMER_ID,FIRST_NAME,LAST_NAME,AGE,COUNTRY,DUPLICATE

SELECT * FROM(
SELECT CUSTOMER_ID,FIRST_NAME,LAST_NAME,AGE,COUNTRY,DUPLICATE,
DENSE_RANK() OVER (ORDER BY DUPLICATE DESC)  AS RNK
FROM(
SELECT CUSTOMER_ID,FIRST_NAME,LAST_NAME,AGE,COUNTRY,
--DENSE_RANK() OVER CUSTOMER_ID ORDER BY 
COUNT(*) AS DUPLICATE
FROM E_CUSTOMERS
GROUP BY CUSTOMER_ID,FIRST_NAME,LAST_NAME,AGE,COUNTRY
) X) X
WHERE RNK = 1

drop table if exists EmpWorkInfo
create table EmpWorkInfo
(id int not null, Name varchar(50), Position varchar(50) null, SocialSecurity int not null, DistanceFromHome varchar(50), Department varchar(50)) 

insert into EmpWorkInfo
(id,Name,Position,SocialSecurity,DistanceFromHome,Department)
 values
(1,'Usama','Junior Engineer',222222222,20,'Marketing'),
(2,'Safwan','Junior Engineer',333333333,8,'Finance'),
(3,'Gulraiz','Senior Engineer',444444444,15,'Finance'),
(4,'Ayesha','Intern',888888888,32,'Technical'),
(5,'Anas','Intern',987654321,25,'Marketing'),
(6,'Areeha','Junior Engineer',444444444,6,'Finance'),
(7,'Raza', 'Senior Engineer',123456789,23,'Technical'),
(8,'Eeman','Senior Engineer',080808080,53,'Technical'),
(9,'Faseeh', 'Senior Engineer',343434343,36,'Finance'),
(10,'Hassan','Junior Engineer',565665656,20,'Marketing')

select *
from EmpWorkInfo

update EmpWorkInfo
set DistanceFromHome=10
where Name='Safwan'

Alter table EmpWorkInfo
Alter column SocialSecurity int

begin tran
Delete EmpWorkInfo
where Name='Safwan'
rollback

select * from E_CUSTOMERS A


select * from E_PRODUCTS 
where AMOUNT=(SELECT MIN(AMOUNT) AS MINIMUM_AMOUNT FROM E_PRODUCTS)

Begin tran
Delete E_PRODUCTS
where AMOUNT=(SELECT MAX(AMOUNT) AS HIGHEST_AMOUNT FROM E_PRODUCTS)
rollback

--EMPLOYEES HAVING 0-10 , MILES FROM HOME SHOULD BE CATEGORIZED AS POOR, 20 AND BELOW AS GOOD,  BELOW 30 THEN BETTER, ELSE BEST

SELECT *,
CASE WHEN DistanceFromHome<=10 THEN 'POOR'
WHEN DistanceFromHome BETWEEN 10 AND 21 THEN 'GOOD'
WHEN DistanceFromHome BETWEEN 20 AND 31 THEN 'BETTER'
ELSE 'BEST'
END AS GRADE
FROM EmpWorkInfo

WITH CTE AS (
SELECT CUSTOMER_ID,FIRST_NAME,LAST_NAME, 
COUNT(*) AS DUPLICATES
FROM E_CUSTOMERS
GROUP BY CUSTOMER_ID,FIRST_NAME,LAST_NAME )
SELECT CUSTOMER_ID,FIRST_NAME,LAST_NAME,DUPLICATES FROM CTE
GROUP BY CUSTOMER_ID,FIRST_NAME,LAST_NAME,DUPLICATES
HAVING DUPLICATES = (SELECT MAX(DUPLICATES) MAXDUP FROM CTE)

ALTER TABLE EMPWORKINFO
ADD DISTANCEFROMHOME_GRADE VARCHAR(50)

UPDATE EmpWorkInfo
SET DISTANCEFROMHOME_GRADE = 
CASE WHEN DistanceFromHome<=10 THEN 'POOR'
WHEN DistanceFromHome BETWEEN 10 AND 21 THEN 'GOOD'
WHEN DistanceFromHome BETWEEN 20 AND 31 THEN 'BETTER'
ELSE 'BEST'
END 
FROM EmpWorkInfo

select *,
SUBSTRING(NAME, 1,3) ABBR
from EmpWorkInfo

select *,
RIGHT(NAME,3) ABBR
from EmpWorkInfo

SELECT * 
FROM EmpWorkInfo

ALTER TABLE EMPWORKINFO
ADD TESTFLAG VARCHAR(50)

UPDATE EmpWorkInfo
SET TESTFLAG = CASE
WHEN DEPARTMENT = 'MARKETING' THEN 'LEVELONE'
WHEN DEPARTMENT = 'FINANCE' THEN NULL
WHEN DEPARTMENT = 'TECHNICAL' THEN 'LEVELTHREE'
ELSE 'N/A'
END

SELECT *, COALESCE(TESTFLAG, 'N/A') TESTFLAG FROM EmpWorkInfo

UPDATE #EmpWorkInfo
SET TESTFLAG='N/A'
WHERE TESTFLAG is NULL

SELECT * 
into #EmpWorkInfo
FROM EmpWorkInfo

SELECT *
FROM #EmpWorkInfo