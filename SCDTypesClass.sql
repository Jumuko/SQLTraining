/**********
EFFICIENTLY MANAGING SLOWLY CHANGING DIMENSIONS TYPE 2 (SCD TYPE 2) USING SQL INSERT-MERGE IN MICROSOFT SQL SERVER

SLOWLY CHANGING DIMENSIONS (SCD) ARE ESSENTIAL IN DATA WAREHOUSING FOR TRACKING CHANGES IN DIMENSION DATA OVER TIME. SCD TYPE 2 MAINTAINS HISTORICAL DATA BY CREATING NEW RECORDS FOR EACH CHANGE, ENSURING THAT NO HISTORICAL DATA IS LOST. IN THIS POST, WE WILL DEMONSTRATE HOW TO EFFICIENTLY IMPLEMENT SCD TYPE 2 USING THE MERGE STATEMENT IN SQL.
UNDERSTANDING SCD TYPE 2
SCD TYPE 2 PRESERVES THE HISTORY OF CHANGES BY ADDING NEW RECORDS RATHER THAN UPDATING EXISTING ONES. EACH RECORD INCLUDES:
  SURROGATE KEY: A UNIQUE IDENTIFIER FOR EACH RECORD.
  NATURAL KEY: THE BUSINESS KEY THAT UNIQUELY IDENTIFIES THE DIMENSION.
  EFFECTIVE DATE AND END DATE: THE PERIOD DURING WHICH THE RECORD IS ACTIVE.
  CURRENT FLAG: INDICATES IF THE RECORD IS THE CURRENT VERSION.
  *************/
  --FACT TABLE:THE ACTUAL TABLE. , DIMENSION TABLE: DISPLAYS MEASUREMENT LIKE TOTAL RECORDS BY YEAR. STAR SCHEMA, SNOWFLAKES SCHEMA
  --UPSERT: MEANS INSERT AND UPDATE

DROP TABLE  IF EXISTS EMADE_SCD_EMPLOYEE
CREATE TABLE EMADE_SCD_EMPLOYEE (
    ID INT NOT NULL,
    NAME VARCHAR(100),
    SALARY DECIMAL(10, 2),
    START_DATE DATE,
    END_DATE DATE,
    IS_ACTIVE CHAR(1))

	INSERT INTO EMADE_SCD_EMPLOYEE (ID, NAME, SALARY, START_DATE, END_DATE, IS_ACTIVE)
VALUES 
    (1, 'JOHN DOE', 50000, '2024-01-01', NULL, 'Y'),
    (2, 'JANE SMITH', 60000, '2024-02-01', NULL, 'Y')

	DROP TABLE  IF EXISTS STG_EMADE_SCD_EMPLOYEE
	CREATE TABLE STG_EMADE_SCD_EMPLOYEE (
    ID INT NOT NULL,
    NAME VARCHAR(100),
    SALARY DECIMAL(10, 2),
    START_DATE DATE)

	INSERT INTO STG_EMADE_SCD_EMPLOYEE (ID, NAME, SALARY, START_DATE)
VALUES 
    (1, 'JOHN DOE', 55000, '2024-05-01'), -- UPDATED RECORD
    (3, 'ALICE JOHNSON', 70000, '2024-05-01'); -- NEW RECORD



	SELECT *
	FROM EMADE_SCD_EMPLOYEE
		SELECT * 
	FROM STG_EMADE_SCD_EMPLOYEE

--PERFORMING MERGE OPERATIONS
	INSERT INTO EMADE_SCD_EMPLOYEE (ID, NAME, SALARY, START_DATE, END_DATE, IS_ACTIVE)
SELECT ID, NAME, SALARY, START_DATE, END_DATE, IS_ACTIVE 
FROM (
    MERGE INTO EMADE_SCD_EMPLOYEE AS TARGET
    USING STG_EMADE_SCD_EMPLOYEE AS SOURCE
    ON TARGET.ID = SOURCE.ID AND TARGET.IS_ACTIVE = 'Y'
    WHEN MATCHED THEN
        UPDATE SET 
            TARGET.IS_ACTIVE = 'N',
            TARGET.END_DATE = GETDATE()
    WHEN NOT MATCHED THEN
        INSERT (ID, NAME, SALARY, START_DATE, END_DATE, IS_ACTIVE)
        VALUES (SOURCE.ID, SOURCE.NAME, SOURCE.SALARY, GETDATE(), NULL, 'Y')
    OUTPUT $ACTION,
        SOURCE.ID,
        SOURCE.NAME,
        SOURCE.SALARY,
        GETDATE(),
        NULL,
        'Y'
) AS [CHANGES] (ACTION, ID, NAME, SALARY, START_DATE, END_DATE, IS_ACTIVE)
WHERE ACTION = 'UPDATE';

SELECT @@ROWCOUNT NUMBEROFRECORDS


--PROJECT 2
DROP TABLE IF EXISTS EMADESOURCEPRODUCTS
CREATE TABLE EMADESOURCEPRODUCTS(
    PRODUCTID		INT,
    PRODUCTNAME		VARCHAR(50),
    PRICE			DECIMAL(9,2)
)
GO
    
INSERT INTO EMADESOURCEPRODUCTS(PRODUCTID,PRODUCTNAME, PRICE) VALUES(1,'TABLE',100)
INSERT INTO EMADESOURCEPRODUCTS(PRODUCTID,PRODUCTNAME, PRICE) VALUES(2,'DESK',180)
INSERT INTO EMADESOURCEPRODUCTS(PRODUCTID,PRODUCTNAME, PRICE) VALUES(3,'CHAIR',50)
INSERT INTO EMADESOURCEPRODUCTS(PRODUCTID,PRODUCTNAME, PRICE) VALUES(4,'COMPUTER',300)
GO

DROP TABLE IF EXISTS EMADETARGETPRODUCTS    
CREATE TABLE EMADETARGETPRODUCTS(
    PRODUCTID		INT,
    PRODUCTNAME		VARCHAR(50),
    PRICE			DECIMAL(9,2),
	IS_ACTIVE		VARCHAR(50)
)
GO
    
INSERT INTO EMADETARGETPRODUCTS(PRODUCTID,PRODUCTNAME, PRICE, IS_ACTIVE) VALUES(1,'TABLE',100,'Y')
INSERT INTO EMADETARGETPRODUCTS(PRODUCTID,PRODUCTNAME, PRICE, IS_ACTIVE) VALUES(2,'DESK',80,'Y')
INSERT INTO EMADETARGETPRODUCTS(PRODUCTID,PRODUCTNAME, PRICE, IS_ACTIVE) VALUES(5,'BED',50, 'Y')
INSERT INTO EMADETARGETPRODUCTS(PRODUCTID,PRODUCTNAME, PRICE, IS_ACTIVE) VALUES(6,'CUPBOARD',300, 'Y')
GO


    
SELECT * FROM EMADETARGETPRODUCTS    
SELECT * FROM EMADESOURCEPRODUCTS


--MERGE OPERATION

    MERGE INTO EMADETARGETPRODUCTS AS TARGET
    USING EMADESOURCEPRODUCTS AS SOURCE
    ON TARGET.PRODUCTID = SOURCE.PRODUCTID 
    --UPDATE RECORDS IN TARGET
	WHEN MATCHED AND TARGET.PRICE<>SOURCE.PRICE THEN
        UPDATE SET 
            TARGET.IS_ACTIVE='N'
			
  --INSERT OPERATIONS 
   WHEN NOT MATCHED THEN
        INSERT (PRODUCTID,PRODUCTNAME, PRICE, IS_ACTIVE)
        VALUES (SOURCE.PRODUCTID,SOURCE.PRODUCTNAME, SOURCE.PRICE, 'Y');

	INSERT INTO EMADETARGETPRODUCTS (PRODUCTID, PRODUCTNAME, PRICE, IS_ACTIVE)
		SELECT DISTINCT SOURCE.PRODUCTID, SOURCE.PRODUCTNAME, SOURCE.PRICE,'Y'
		FROM EMADESOURCEPRODUCTS AS SOURCE
		LEFT JOIN EMADETARGETPRODUCTS AS TARGET
		ON SOURCE.PRODUCTID = TARGET.PRODUCTID
		WHERE TARGET.IS_ACTIVE = 'N';

	
--ASSIGNMENT: PLACE "ENDDATE", "STARTDATE" IN TABLE AND PERFORM OPERATION FOR SCD TYPE2
--CREATE 2 TABLES: ONE IS EMADEPRODUCTLIST TARGET, THE OTHER ONE EMADEUPDATEDLIST SOURCE.

-- DROP TABLES IF THEY EXIST
DROP TABLE IF EXISTS TGT_EMADEPRODUCTLIST;
DROP TABLE IF EXISTS STG_EMADEPRODUCTUPDATEDLIST;

-- CREATE TARGET TABLE
CREATE TABLE TGT_EMADEPRODUCTLIST (
    PRODUCTID INT NOT NULL,
    PRODUCTNAME VARCHAR(50),
    PRICE MONEY,
    STARTDATE DATE,
    ENDDATE DATE,
    IS_ACTIVE VARCHAR(1)
);

-- INSERT INITIAL DATA INTO TARGET TABLE
INSERT INTO TGT_EMADEPRODUCTLIST (PRODUCTID, PRODUCTNAME, PRICE, STARTDATE, ENDDATE, IS_ACTIVE)
VALUES
    (101, 'TEA', 10.00, '2024-01-01', NULL, 'Y'),
    (102, 'COFFEE', 15.00, '2024-01-01', NULL, 'Y'),
    (103, 'BISCUITS', 20.00, '2024-01-01', NULL, 'Y');

-- CREATE SOURCE TABLE
CREATE TABLE STG_EMADEPRODUCTUPDATEDLIST (
    PRODUCTID INT NOT NULL,
    PRODUCTNAME VARCHAR(50),
    PRICE MONEY
);

-- INSERT UPDATED DATA INTO SOURCE TABLE
INSERT INTO STG_EMADEPRODUCTUPDATEDLIST (PRODUCTID, PRODUCTNAME, PRICE)
VALUES
    (101, 'TEA', 10.00),
    (102, 'COFFEE', 35.00),
    (104, 'CHIPS', 22.00);

-- STEP 1: PERFORM MERGE OPERATION FOR SCD TYPE 2
MERGE INTO TGT_EMADEPRODUCTLIST AS TARGET
USING STG_EMADEPRODUCTUPDATEDLIST AS SOURCE
ON TARGET.PRODUCTID = SOURCE.PRODUCTID AND TARGET.IS_ACTIVE = 'Y'
WHEN MATCHED AND 
     (TARGET.PRODUCTNAME <> SOURCE.PRODUCTNAME OR TARGET.PRICE <> SOURCE.PRICE)
THEN
    -- END DATE THE CURRENT RECORD AND UPDATE IT TO INACTIVE
    UPDATE SET 
        TARGET.ENDDATE = GETDATE(),
        TARGET.IS_ACTIVE = 'N'
WHEN NOT MATCHED BY TARGET
THEN
    -- INSERT NEW RECORDS FROM SOURCE INTO TARGET
    INSERT (PRODUCTID, PRODUCTNAME, PRICE, STARTDATE, ENDDATE, IS_ACTIVE)
    VALUES (SOURCE.PRODUCTID, SOURCE.PRODUCTNAME, SOURCE.PRICE, GETDATE(), NULL, 'Y');


-- STEP 3: HANDLE UPDATED RECORDS USING MERGE
--THIS APPROACH DID NOT WORK
/**
MERGE INTO TGT_EMADEPRODUCTLIST AS TARGET
USING STG_EMADEPRODUCTUPDATEDLIST AS SOURCE
ON TARGET.PRODUCTID = SOURCE.PRODUCTID
WHEN NOT MATCHED BY TARGET
THEN
    -- INSERT UPDATED RECORDS
    INSERT (PRODUCTID, PRODUCTNAME, PRICE, STARTDATE, ENDDATE, IS_ACTIVE)
    VALUES (SOURCE.PRODUCTID, SOURCE.PRODUCTNAME, SOURCE.PRICE, GETDATE(), NULL, 'Y');
**/

--STEP 3: ALTERNATIVE APPROACH: INSERT UPDATED RECORDS USING JOIN LOGIC
INSERT INTO TGT_EMADEPRODUCTLIST (PRODUCTID, PRODUCTNAME, PRICE, STARTDATE, ENDDATE, IS_ACTIVE)
SELECT DISTINCT SOURCE.PRODUCTID, SOURCE.PRODUCTNAME, SOURCE.PRICE, GETDATE(), NULL, 'Y'
FROM STG_EMADEPRODUCTUPDATEDLIST AS SOURCE
LEFT JOIN TGT_EMADEPRODUCTLIST AS TARGET
ON SOURCE.PRODUCTID = TARGET.PRODUCTID
WHERE TARGET.IS_ACTIVE = 'N';



-- VERIFY THE FINAL DATA IN TARGET TABLE
SELECT * FROM TGT_EMADEPRODUCTLIST;
SELECT * FROM STG_EMADEPRODUCTUPDATEDLIST;


