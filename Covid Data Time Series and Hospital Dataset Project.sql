/**********************************************************************************************************************
DEVELOPER: JOHN O. UMUKORO
DATE CREATED: 2025-03-21
CODE VERSION: 1.0
DESCRIPTION: THIS CODE PROVIDES INFORMATION ABOUT COVID DATA TIME SERIES AND HOSPITAL DATASET
PROJECT SCOPE:  1: LOAD COVID DATA TIME SERIES AND HOSPITAL DATASET TO DATABASE 
				2: CREATE SQL QUERIES TO GENERATE METRICS 
				3: PRODUCE A BUSINESS INTELLIGENCE REPORT FOR EACH DATASET SHOWING DIFFERENT KPIS
**********************************************************************************************************************/
Select * from CovidDataTimeSeries
Where Province is null
or [Country Region]is null
or latitude is null
or Longitude is null
or deaths is null
or date is null
or Recovered is null
or Confirmed is null

---UPDATE NULLS
UPDATE dbo.CovidDataTimeSeries
SET Longitude = 0 ,Latitude = 0 ,Recovered = 0 
WHERE Province IS NULL
OR Country_Region IS NULL
OR Latitude IS NULL
OR Longitude IS NULL
OR Date IS NULL
OR Confirmed IS NULL
OR Deaths IS NULL
OR Recovered IS NULL

Alter table COVIDDATATIMESERIES
alter column Deaths varchar(50)


--GENERATE KPIS WITH COVID DATA TIME SERIES
SELECT DEATHS 
FROM COVIDDATATIMESERIES


--TOTAL DEATH COUNT BY COUNTRY
SELECT [COUNTRY REGION],
SUM(COALESCE(DEATHS, 0)) AS TOTALDEATHRATE
FROM COVIDDATATIMESERIES
GROUP BY [COUNTRY REGION]

SELECT [COUNTRY REGION],
SUM(CASE WHEN DEATHS IS NULL THEN 0 ELSE 1
END) AS TOTALDEATHRATE
FROM COVIDDATATIMESERIES
GROUP BY [COUNTRY REGION]

--TOTAL DEATH COUNT BY COUNTRY
SELECT [COUNTRY REGION],
SUM(DEATHS) AS TOTALDEATHRATE
FROM COVIDDATATIMESERIES
GROUP BY [COUNTRY REGION]


--COUNTRY WITH THE HIGHEST DEATH COUNT
SELECT TOP 1 [COUNTRY REGION],
SUM(DEATHS) AS TOTALDEATHRATE
FROM COVIDDATATIMESERIES
GROUP BY [COUNTRY REGION]
ORDER BY TOTALDEATHRATE DESC

--TOTAL DEATH COUNT IN 2020
SELECT 
SUM(DEATHS) AS [2020TOTALDEATHCOUNT]
FROM COVIDDATATIMESERIES
WHERE [DATE] LIKE '%2020'

--TOTAL DEATH COUNT IN 2021
SELECT 
SUM(DEATHS) AS [2021TOTALDEATHCOUNT]
FROM COVIDDATATIMESERIES
WHERE [DATE] LIKE '%2021'

--DEATH COUNT BY PROVINCE
SELECT PROVINCE,
SUM(DEATHS) AS DEATHCOUNT
FROM COVIDDATATIMESERIES
GROUP BY PROVINCE

--TOP 3 TOTALDEATHRATE BY PROVINCE
SELECT TOP 3 PROVINCE,
SUM(DEATHS) AS DEATHCOUNT
FROM COVIDDATATIMESERIES
GROUP BY PROVINCE
ORDER BY DEATHCOUNT DESC

--PROVINCE WITH ONE RECORD OF DEATH
SELECT PROVINCE,
SUM(DEATHS) AS DEATHCOUNT
FROM COVIDDATATIMESERIES
GROUP BY PROVINCE
HAVING SUM(DEATHS) = 1
ORDER BY DEATHCOUNT ASC

--PROVINCE WITH NO RECORD OF DEATH
SELECT PROVINCE,
SUM(DEATHS) AS DEATHCOUNT
FROM COVIDDATATIMESERIES
GROUP BY PROVINCE
HAVING SUM(DEATHS) = 0
ORDER BY DEATHCOUNT ASC



--GENERATE KPIS WITH HEALTH CARE DATASET
SELECT NAME,count(Name) as N  FROM HEALTHCAREDATASET
group by name 
order by N desc

--CHANGE NAME COLUMN TO UPPERCASE
UPDATE HEALTHCAREDATASET
SET NAME = upper(NAME) 


--PATIENT COUNT BY AGE
SELECT AGE,
COUNT(NAME) AS NO_OF_PATIENTS
FROM HEALTHCAREDATASET
GROUP BY AGE 
ORDER BY AGE ASC


--PATIENT COUNT BY MEDICAL CONDITION
CREATE VIEW VWCONDITION AS
SELECT [MEDICAL CONDITION],
COUNT(NAME) AS NO_OF_PATIENTS
FROM HEALTHCAREDATASET
GROUP BY [MEDICAL CONDITION] 
ORDER BY [MEDICAL CONDITION] ASC

--PATIENT COUNT BY GENDER
CREATE VIEW VWGENDER AS
SELECT GENDER,
COUNT(NAME) AS NO_OF_PATIENTS
FROM HEALTHCAREDATASET
GROUP BY GENDER

--PATIENT COUNT BY INSURANCE PROVIDER
SELECT [INSURANCE PROVIDER],
COUNT(NAME) AS NO_OF_PATIENTS
FROM HEALTHCAREDATASET
GROUP BY [INSURANCE PROVIDER]

--PATIENT COUNT BY ADMISSION TYPE
SELECT [ADMISSION TYPE],
COUNT(NAME) AS NO_OF_PATIENTS
FROM HEALTHCAREDATASET
GROUP BY [ADMISSION TYPE]

--MEDICATIONS DISPENSED
SELECT MEDICATION,
COUNT(MEDICATION) AS ADMINISTEREDMEDICATIONCOUNT
FROM HEALTHCAREDATASET
GROUP BY MEDICATION

--CHECKING FOR DUPLICATES
SELECT NAME,AGE,GENDER,
COUNT(*) AS DUPLICATES
FROM HEALTHCAREDATASET
GROUP BY NAME,AGE,GENDER
HAVING COUNT(*)>1

--ELIMINATE DUPLICATE RECORDS
SELECT DISTINCT NAME,AGE,GENDER
FROM HEALTHCAREDATASET

SELECT NAME,AGE,GENDER
FROM HEALTHCAREDATASET
GROUP BY NAME,AGE,GENDER

--PATIENTS MEDICAL RISK CATEGORY
CREATE VIEW VWRISKCATEGORY AS
SELECT *,
CASE WHEN [ADMISSION TYPE] ='ELECTIVE' THEN 'LOW RISK'
	 WHEN [ADMISSION TYPE] ='URGENT' THEN 'MEDIUM RISK'
	 ELSE 'HIGH RISK'
	 END AS MEDICALRISKCATEGORY
FROM HEALTHCAREDATASET

--MEDICATIONS RECOMMENDED TO PATIENTS CONDITION
--CANCER
CREATE VIEW VWCANCER AS
SELECT  TOP 1 MEDICATION,[MEDICAL CONDITION],
COUNT(MEDICATION) DISPENSED
FROM HEALTHCAREDATASET
WHERE [MEDICAL CONDITION]='CANCER'
GROUP BY MEDICATION,[MEDICAL CONDITION]
ORDER BY DISPENSED DESC
--DIABETES
CREATE VIEW VWDIABETES AS
SELECT  TOP 1 MEDICATION,[MEDICAL CONDITION],
COUNT(MEDICATION) DISPENSED
FROM HEALTHCAREDATASET
WHERE [MEDICAL CONDITION]='DIABETES'
GROUP BY MEDICATION,[MEDICAL CONDITION]
ORDER BY DISPENSED DESC
--ARTHRITIS
CREATE VIEW VWARTHRITIS AS
SELECT  TOP 1 MEDICATION,[MEDICAL CONDITION],
COUNT(MEDICATION) DISPENSED
FROM HEALTHCAREDATASET
WHERE [MEDICAL CONDITION]='ARTHRITIS'
GROUP BY MEDICATION,[MEDICAL CONDITION]
ORDER BY DISPENSED DESC
--HYPERTENSION
CREATE VIEW VWHYPERTENSION AS
SELECT  TOP 1 MEDICATION,[MEDICAL CONDITION],
COUNT(MEDICATION) DISPENSED
FROM HEALTHCAREDATASET
WHERE [MEDICAL CONDITION]='HYPERTENSION'
GROUP BY MEDICATION,[MEDICAL CONDITION]
ORDER BY DISPENSED DESC
--OBESITY
CREATE VIEW VWOBESITY AS
SELECT  TOP 1 MEDICATION,[MEDICAL CONDITION],
COUNT(MEDICATION) DISPENSED
FROM HEALTHCAREDATASET
WHERE [MEDICAL CONDITION]='OBESITY'
GROUP BY MEDICATION,[MEDICAL CONDITION]
ORDER BY DISPENSED DESC
--ASTHMA
CREATE VIEW VWASTHMA AS
SELECT  TOP 1 MEDICATION,[MEDICAL CONDITION],
COUNT(MEDICATION) DISPENSED
FROM HEALTHCAREDATASET
WHERE [MEDICAL CONDITION]='ASTHMA'
GROUP BY MEDICATION,[MEDICAL CONDITION]
ORDER BY DISPENSED DESC

--PATIENT COUNT BY AGE GROUP
--13 TO 25
SELECT 
COUNT(NAME) AS NO_OF_PATIENTS
FROM HEALTHCAREDATASET
WHERE AGE BETWEEN 12 AND 26
--26 TO 39
SELECT 
COUNT(NAME) AS NO_OF_PATIENTS
FROM HEALTHCAREDATASET
WHERE AGE BETWEEN 25 AND 40
--40 TO 59
SELECT 
COUNT(NAME) AS NO_OF_PATIENTS
FROM HEALTHCAREDATASET
WHERE AGE BETWEEN 39 AND 60
--60 TO 80
SELECT 
COUNT(NAME) AS NO_OF_PATIENTS
FROM HEALTHCAREDATASET
WHERE AGE BETWEEN 59 AND 81

--AVERAGE TREATMENT COST PER AGE GROUP
CREATE VIEW AVGCOSTPERAGE60TO80 AS
SELECT 
AVG([Billing Amount]) AS AvgTreatmentCost
FROM HEALTHCAREDATASET
WHERE AGE BETWEEN 59 AND 81;

CREATE VIEW AVGCOSTPERAGE40TO59 AS 
SELECT 
AVG([Billing Amount]) AS AvgTreatmentCost
FROM HEALTHCAREDATASET
WHERE AGE BETWEEN 39 AND 60;

CREATE VIEW AVGCOSTPERAGE26TO39 AS
SELECT 
AVG([Billing Amount]) AS AvgTreatmentCost
FROM HEALTHCAREDATASET
WHERE AGE BETWEEN 25 AND 40;

select * from HealthCareDataset

with MaxAge as
(select name,age,gender,[blood type] from HealthCareDataset)

select max(age) as MaximumAge from MaxAge


select name,age,gender,[blood type] from Healthcaredataset
where Age =
(select Max(Age) as Oldest
from HealthCareDataset) 

--Finding Count of Medical Condition of patients and listing it by maximum no of patients.

SELECT DISTINCT [MEDICAL CONDITION], 
COUNT(NAME) AS NOOFPATIENTS 
FROM HealthCareDataset 
GROUP BY [Medical Condition] 
ORDER BY NOOFPATIENTS DESC

--CHECK FIRST 10 ROWS

SELECT TOP 10 *
FROM HealthCareDataset

--USING FETCH FUNCTION AND OFFSET NEXT 
SELECT *
FROM HealthCareDataset
ORDER BY NAME
OFFSET 5 ROWS
FETCH NEXT 10 ROWS ONLY

--CHECK HOW MANY ROWS
SELECT COUNT (*) AS NOOFROWS FROM HealthCareDataset

SELECT * FROM CovidDataTimeSeries
--IDENTIFY DUPLICATES
SELECT [Province], [Country Region], [Latitude], [Longitude], [Date], [Confirmed], [Deaths], [Recovered] , 
COUNT(*) AS DUPLICATES FROM CovidDataTimeSeries 
GROUP BY [Province], [Country Region], [Latitude], [Longitude], [Date], [Confirmed], [Deaths], [Recovered]
HAVING COUNT(*) > 1
--RESOLVE DUPLICATES
SELECT [Province], [Country Region], [Latitude], [Longitude], [Date], [Confirmed], [Deaths], [Recovered] 
FROM CovidDataTimeSeries
GROUP BY [Province], [Country Region], [Latitude], [Longitude], [Date], [Confirmed], [Deaths], [Recovered]

--HOW MANY MONTH FOR COVIDDATATIMESERIES
SELECT YEAR(DATE) AS YEAR, COUNT (DISTINCT MONTH(DATE)) AS NOOFMONTHS FROM CovidDataTimeSeries GROUP BY DATE

--EARLIEST START DATE TO LATEST END DATE
SELECT MIN(DATE) AS EARLIEST, MAX(DATE) AS LATEST FROM COVIDDATATIMESERIES

--HOW MANY RECORDS IN EACH ROW
SELECT DATEPART(YEAR,DATE) AS YEAR, DATEPART(MONTH,DATE) AS MONTH, COUNT(*) AS NOOFRECORDS FROM CovidDataTimeSeries GROUP BY DATE ORDER BY 1,2,3 DESC

--MIN:CONFIRMED,DEATH,RECOVERED PER MONTH
SELECT YEAR(DATE) AS YEAR, MONTH(DATE) AS MONTH, MIN(CONFIRMED) AS MIN_CONFIRMED,MIN(DEATHS) AS MIN_DEATH,MIN(RECOVERED) AS MIN_RECOVERED FROM CovidDataTimeSeries GROUP BY DATE,CONFIRMED,DEATHS,RECOVERED ORDER BY 1,2

SELECT DATEPART(YEAR,DATE) AS YEAR, DATEPART(MONTH,DATE) AS MONTH, MIN(CONFIRMED) AS MIN_CONFIRMED,MIN(DEATHS) AS MIN_DEATH,MIN(RECOVERED) AS MIN_RECOVERED FROM CovidDataTimeSeries GROUP BY DATEPART(YEAR,DATE),DATEPART(MONTH,DATE),CONFIRMED,DEATHS,RECOVERED ORDER BY 1,2