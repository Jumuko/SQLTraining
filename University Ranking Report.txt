
/**********************************************************************************************************************
DEVELOPER: JOHN O. UMUKORO
DATE CREATED: 2025-01-21
CODE VERSION: 1.0
DESCRIPTION: THIS CODE PROVIDES INFORMATION ABOUT TOP UNIVERSITIES,ENROLLMENT TRENDS, PERFORMANCES
			 RANKING SYSTEMS, NUMBER OF STUDENTS/EMPLOYEES BY EACH UNIVERSITY, 
			 FROM UNIVERSITY RANKING DATA
**********************************************************************************************************************/



--1. NUMBER OF DISTINCT INSTITUTION
SELECT 
COUNT(ID) AS TOTALNOOFINSTITUTION
FROM UNIVERSITY

--SAVE AS VIEW
CREATE VIEW VWTOTALNOOFINSTITUTION AS
SELECT 
COUNT(ID) AS TOTALNOOFINSTITUTION
FROM UNIVERSITY

--2. NUMBER OF INSTITUTION BY COUNTRY
SELECT A.COUNTRY_NAME,
COUNT(B.ID) NUMBEROFINSTITUTIONS
FROM COUNTRY A,UNIVERSITY B
WHERE A.ID=B.COUNTRY_ID
GROUP BY A.COUNTRY_NAME

--SAVE AS VIEW
CREATE VIEW VWNUMBEROFINSTITUTIONSBYCOUNTRY AS
SELECT A.COUNTRY_NAME,
COUNT(B.ID) NUMBEROFINSTITUTIONS
FROM COUNTRY A,UNIVERSITY B
WHERE A.ID=B.COUNTRY_ID
GROUP BY A.COUNTRY_NAME


--3. TOP 3 INSTITUTIONS BY PERFORMANCE
SELECT * FROM UNIVERSITY_RANKING_YEAR
ORDER BY SCORE DESC

--SAVE AS VIEW
CREATE VIEW VWTOPINSTITUTIONSBYPERFORMANCE AS
SELECT * FROM UNIVERSITY_RANKING_YEAR
ORDER BY SCORE DESC

--4. TOP UNIVERSITIES BY TOTAL STUDENTS
SELECT A.UNIVERSITY_NAME, 
SUM(B.NUM_STUDENTS) AS TOTAL_STUDENTS
FROM UNIVERSITY A
JOIN UNIVERSITY_YEAR B ON A.ID = B.UNIVERSITY_ID
GROUP BY A.UNIVERSITY_NAME
ORDER BY TOTAL_STUDENTS DESC;

--SAVE AS VIEW
CREATE VIEW VWTOPUNIVERSITIESBYTOTALSTUDENTS AS
SELECT A.UNIVERSITY_NAME, 
SUM(B.NUM_STUDENTS) AS TOTAL_STUDENTS
FROM UNIVERSITY A
JOIN UNIVERSITY_YEAR B ON A.ID = B.UNIVERSITY_ID
GROUP BY A.UNIVERSITY_NAME
ORDER BY TOTAL_STUDENTS DESC;


--5. AVERAGE STUDENT-TO-STAFF RATIO ACCROSS ALL UNIVERSITIES
SELECT 
AVG(STUDENT_STAFF_RATIO) AS AVG_STUDENT_STAFF_RATIO
FROM UNIVERSITY_YEAR;

--SAVE AS VIEW
CREATE VIEW VWSTUDENTSTAFFRATIO AS
SELECT 
AVG(STUDENT_STAFF_RATIO) AS AVG_STUDENT_STAFF_RATIO
FROM UNIVERSITY_YEAR;

--6. AVERAGE PERCENTAGE OF FEMALE STUDENTS BY UNIVERSITY
SELECT A.UNIVERSITY_NAME, 
AVG(B.PCT_FEMALE_STUDENTS) AS AVG_PCT_FEMALE
FROM UNIVERSITY A
JOIN UNIVERSITY_YEAR B ON A.ID = B.UNIVERSITY_ID
GROUP BY A.UNIVERSITY_NAME;

--SAVE AS VIEW
CREATE VIEW VWPERCENTAGEOFFEMALESTUDENTSBYUNIVERSITIES AS
SELECT A.UNIVERSITY_NAME, 
AVG(B.PCT_FEMALE_STUDENTS) AS AVG_PCT_FEMALE
FROM UNIVERSITY A
JOIN UNIVERSITY_YEAR B ON A.ID = B.UNIVERSITY_ID
GROUP BY A.UNIVERSITY_NAME;

--7. PERCENTAGE OF INTERNATIONAL STUDENTS BY COUNTRY
SELECT C.COUNTRY_NAME, 
AVG(B.PCT_INTERNATIONAL_STUDENTS) AS AVG_INTERNATIONAL_PCT
FROM COUNTRY C
JOIN UNIVERSITY A ON C.ID = A.COUNTRY_ID
JOIN UNIVERSITY_YEAR B ON A.ID = B.UNIVERSITY_ID
GROUP BY C.COUNTRY_NAME;

--SAVE AS VIEW
CREATE VIEW VWPERCENTAGE_INTERNATIONALSTUDENTSBYCOUNTRY AS
SELECT C.COUNTRY_NAME, 
AVG(B.PCT_INTERNATIONAL_STUDENTS) AS AVG_INTERNATIONAL_PCT
FROM COUNTRY C
JOIN UNIVERSITY A ON C.ID = A.COUNTRY_ID
JOIN UNIVERSITY_YEAR B ON A.ID = B.UNIVERSITY_ID
GROUP BY C.COUNTRY_NAME;


--8. INTERNATIONAL STUDENTS BY UNIVERSITY
SELECT A.UNIVERSITY_NAME, 
AVG(UY.PCT_INTERNATIONAL_STUDENTS) AS INTL_STUDENTS_PCT
FROM UNIVERSITY A
JOIN UNIVERSITY_YEAR UY ON A.ID = UY.UNIVERSITY_ID
GROUP BY A.UNIVERSITY_NAME;

--SAVE AS VIEW
CREATE VIEW VWPERCENTAGE_INTERNATIONALSTUDENTSBYUNIVERSITY AS
SELECT A.UNIVERSITY_NAME, 
AVG(UY.PCT_INTERNATIONAL_STUDENTS) AS INTL_STUDENTS_PCT
FROM UNIVERSITY A
JOIN UNIVERSITY_YEAR UY ON A.ID = UY.UNIVERSITY_ID
GROUP BY A.UNIVERSITY_NAME;


--9. TOP UNIVERSITIES BY QUALITY OF EDUCATION RANK
SELECT A.UNIVERSITY_NAME, RC.CRITERIA_NAME, 
AVG(URY.SCORE) AS AVG_SCORE
FROM UNIVERSITY A
JOIN UNIVERSITY_RANKING_YEAR URY ON A.ID = URY.UNIVERSITY_ID
JOIN RANKING_CRITERIA RC ON URY.RANKING_CRITERIA_ID = RC.ID
WHERE RC.CRITERIA_NAME = 'QUALITY OF EDUCATION RANK'
GROUP BY A.UNIVERSITY_NAME, RC.CRITERIA_NAME
ORDER BY AVG_SCORE DESC;

--SAVE AS VIEW
CREATE VIEW VWTOPUNIVERSITIESBYQUALITYOFEDUCATION AS
SELECT A.UNIVERSITY_NAME, RC.CRITERIA_NAME, 
AVG(URY.SCORE) AS AVG_SCORE
FROM UNIVERSITY A
JOIN UNIVERSITY_RANKING_YEAR URY ON A.ID = URY.UNIVERSITY_ID
JOIN RANKING_CRITERIA RC ON URY.RANKING_CRITERIA_ID = RC.ID
WHERE RC.CRITERIA_NAME = 'QUALITY OF EDUCATION RANK'
GROUP BY A.UNIVERSITY_NAME, RC.CRITERIA_NAME
ORDER BY AVG_SCORE DESC;

--10. TOP UNIVERSITIES BY TEACHING RANK
SELECT A.UNIVERSITY_NAME, RC.CRITERIA_NAME, 
AVG(URY.SCORE) AS AVG_SCORE
FROM UNIVERSITY A
JOIN UNIVERSITY_RANKING_YEAR URY ON A.ID = URY.UNIVERSITY_ID
JOIN RANKING_CRITERIA RC ON URY.RANKING_CRITERIA_ID = RC.ID
WHERE RC.CRITERIA_NAME = 'TEACHING'
GROUP BY A.UNIVERSITY_NAME, RC.CRITERIA_NAME
ORDER BY AVG_SCORE DESC;

--SAVE AS VIEW
CREATE VIEW VWTOPUNIVERSITIESBYTEACHING AS
SELECT A.UNIVERSITY_NAME, RC.CRITERIA_NAME, 
AVG(URY.SCORE) AS AVG_SCORE
FROM UNIVERSITY A
JOIN UNIVERSITY_RANKING_YEAR URY ON A.ID = URY.UNIVERSITY_ID
JOIN RANKING_CRITERIA RC ON URY.RANKING_CRITERIA_ID = RC.ID
WHERE RC.CRITERIA_NAME = 'TEACHING'
GROUP BY A.UNIVERSITY_NAME, RC.CRITERIA_NAME

--11. UNIVERSITIES MEETING STAFF-STUDENT RATIO THRESHOLD: IDENTIFIES UNIVERSITIES MEETING A TARGET STUDENT-STAFF RATIO.
SELECT DISTINCT A.UNIVERSITY_NAME, B.STUDENT_STAFF_RATIO
FROM UNIVERSITY A
JOIN UNIVERSITY_YEAR B ON A.ID = B.UNIVERSITY_ID
WHERE B.STUDENT_STAFF_RATIO < 15;

--SAVE AS VIEW
CREATE VIEW VWUNIVERSITIESMEETINGSTAFFSTUDENTRATIO AS
SELECT DISTINCT A.UNIVERSITY_NAME, B.STUDENT_STAFF_RATIO
FROM UNIVERSITY A
JOIN UNIVERSITY_YEAR B ON A.ID = B.UNIVERSITY_ID
WHERE B.STUDENT_STAFF_RATIO < 15;

--12. FEMALE STUDENT TREND OVER YEARS: TRACKS THE PERCENTAGE OF FEMALE STUDENTS OVER TIME.
SELECT YEAR, 
AVG(PCT_FEMALE_STUDENTS) AS AVG_FEMALE_PCT
FROM UNIVERSITY_YEAR
GROUP BY YEAR
ORDER BY YEAR;

--SAVE AS VIEW
CREATE VIEW VWFEMALESTUDENTTRENDOVERYEARS AS
SELECT YEAR, 
AVG(PCT_FEMALE_STUDENTS) AS AVG_FEMALE_PCT
FROM UNIVERSITY_YEAR
GROUP BY YEAR



--13. TOP RESEARCH SCORE BY COUNTRY: AVERAGE RESEARCH SCORES FOR EACH COUNTRY.
SELECT C.COUNTRY_NAME, AVG(URV.SCORE) AS AVG_RESEARCH_SCORE
FROM COUNTRY C
JOIN UNIVERSITY A ON C.ID = A.COUNTRY_ID
JOIN UNIVERSITY_RANKING_YEAR URV ON A.ID = URV.UNIVERSITY_ID
JOIN RANKING_CRITERIA RC ON URV.RANKING_CRITERIA_ID = RC.ID
WHERE RC.CRITERIA_NAME = 'RESEARCH'
GROUP BY C.COUNTRY_NAME
ORDER BY AVG(URV.SCORE) DESC

--SAVE AS VIEW
CREATE VIEW VWTOPRESEARCHSCOREBYCOUNTRY AS
SELECT C.COUNTRY_NAME, AVG(URV.SCORE) AS AVG_RESEARCH_SCORE
FROM COUNTRY C
JOIN UNIVERSITY A ON C.ID = A.COUNTRY_ID
JOIN UNIVERSITY_RANKING_YEAR URV ON A.ID = URV.UNIVERSITY_ID
JOIN RANKING_CRITERIA RC ON URV.RANKING_CRITERIA_ID = RC.ID
WHERE RC.CRITERIA_NAME = 'RESEARCH'
GROUP BY C.COUNTRY_NAME

--14. AVERAGE NUMBER OF STUDENTS BY YEAR
SELECT YEAR, AVG(NUM_STUDENTS) AS AVG_STUDENTS
FROM UNIVERSITY_YEAR
GROUP BY YEAR
ORDER BY YEAR;

--SAVE AS VIEW
CREATE VIEW VWAVERAGENUMBEROFSTUDENTSBYYEAR AS
SELECT YEAR, AVG(NUM_STUDENTS) AS AVG_STUDENTS
FROM UNIVERSITY_YEAR
GROUP BY YEAR

--15. TOP PERFORMING UNIVERSITIES BY YEAR
WITH RANKEDUNIVERSITIES AS (
    SELECT 
        URV.YEAR,
        U.UNIVERSITY_NAME,
        MAX(URV.SCORE) AS HIGHEST_SCORE,
        ROW_NUMBER() OVER (PARTITION BY URV.YEAR ORDER BY MAX(URV.SCORE) DESC) AS RANK
    FROM UNIVERSITY_RANKING_YEAR URV
    JOIN UNIVERSITY U ON URV.UNIVERSITY_ID = U.ID
    GROUP BY URV.YEAR, U.UNIVERSITY_NAME
)
SELECT YEAR, UNIVERSITY_NAME, HIGHEST_SCORE
FROM RANKEDUNIVERSITIES
WHERE RANK = 1
ORDER BY YEAR;

--SAVE AS VIEW
CREATE VIEW VWTOPPERFORMINGUNIVERSITIESBYYEAR AS
WITH RANKEDUNIVERSITIES AS (
    SELECT 
        URV.YEAR,
        U.UNIVERSITY_NAME,
        MAX(URV.SCORE) AS HIGHEST_SCORE,
        ROW_NUMBER() OVER (PARTITION BY URV.YEAR ORDER BY MAX(URV.SCORE) DESC) AS RANK
    FROM UNIVERSITY_RANKING_YEAR URV
    JOIN UNIVERSITY U ON URV.UNIVERSITY_ID = U.ID
    GROUP BY URV.YEAR, U.UNIVERSITY_NAME
)
SELECT YEAR, UNIVERSITY_NAME, HIGHEST_SCORE
FROM RANKEDUNIVERSITIES
WHERE RANK = 1



SELECT * FROM UNIVERSITY_RANKING_YEAR
ORDER BY SCORE DESC

SELECT * FROM RANKING_CRITERIA